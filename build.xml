<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="sample_project" default="build" basedir=".">
   
   <!-- Namespace to be created and used for the patternity.js objects -->
	<property name="namespace" value="py"/>

	<property name="BUILD_DIR"      value="dist" />
	<property name="SOURCE_DIR"     value="src" />
	<property name="RESOURCE_DIR"   value="resource" />
	<property name="CLOSURE" value="${RESOURCE_DIR}/compiler.jar" />
	<property name="JS_LINT" value="${RESOURCE_DIR}/jslint4java-1.4.4.jar" />
	<property name="JS_DOC_TOOLKIT" value="${RESOURCE_DIR}/jsdoc-toolkit" />

	<property name="OUTPUT_SRC_FILE" value="source.concat.js" />
	<property name="OUTPUT_JS_FILE" value="patternity.js" />

	<taskdef name="jslint" classname="com.googlecode.jslint4java.ant.JSLintTask" classpath="${JS_LINT}" />

	<target name="build" depends="clean, lint, bundle_javascript, nswrap, compress_javascript, create_doc" />
	<target name="web" depends="clean, lint, bundle_javascript, nswebdetect, compress_javascript, create_doc" />

	<target name="lint">
		<jslint options="undef, eqeqeq, bitwise, regexp, newcap, immed, browser">
			<predef>window, py</predef>
			<formatter type="plain" />
			<fileset dir="${SOURCE_DIR}" includes="**/*.js" excludes="nswrap/*.js"/>
		</jslint>
	</target>
	
	<!--
	This is the "create JavaScript bundles" task
	used to create concatenated file
	-->
	<target name="bundle_javascript">
		<!-- create the output directory for built files -->
		<mkdir dir="${BUILD_DIR}"/>
		<echo>Bundle JavaScript Files...</echo>
		<concat destfile="${BUILD_DIR}/${OUTPUT_SRC_FILE}">
			<filelist dir="${SOURCE_DIR}">
				<file name="utils.js"/>
				<file name="Class.js"/>
				<file name="Singleton.js"/>
				<file name="Interface.js"/>
				<file name="Observable.js"/>
				<file name="IIterable.js"/>
				<file name="Iterator.js"/>
				<file name="List.js"/>
				<file name="ListOf.js"/>
				<file name="Listenable.js"/>
				<file name="Timer.js"/>
				<file name="Sync.js"/>
			</filelist>
		</concat>
		<echo>JavaScript Bundles Done!!!</echo>
	</target>
	<!--
		This task will wrap the library with 
		parametriezes namespace (it will also create this namespace in the application)
	-->
	<target name="nswrap">
		<concat destfile="${BUILD_DIR}/${OUTPUT_JS_FILE}">
			<fileset file="${SOURCE_DIR}/nswrap/nswrapstart.js"/>
			<fileset file="${BUILD_DIR}/${OUTPUT_SRC_FILE}"/>
			<fileset file="${SOURCE_DIR}/nswrap/nswrapend.js"/>
		</concat>
		<replace file="${BUILD_DIR}/${OUTPUT_JS_FILE}" token="@@namespace" value="${namespace}"/>
		<delete file="${BUILD_DIR}/${OUTPUT_SRC_FILE}"/>
	</target>
	<!--
		This task will wrap the library with a script tag namespace detector. 
		whenever library is included script tag can define namespace using the
		data-namespace attribute i.e
		<script src="..patternity.js" data-namespace="my.name.space">
	-->
	<target name="nswebdetect">
		<concat destfile="${BUILD_DIR}/${OUTPUT_JS_FILE}">
			<fileset file="${SOURCE_DIR}/nswrap/nsscriptdetect.js"/>
			<fileset file="${BUILD_DIR}/${OUTPUT_SRC_FILE}"/>
			<fileset file="${SOURCE_DIR}/nswrap/nsscriptdetectend.js"/>
		</concat>
		<replace file="${BUILD_DIR}/${OUTPUT_JS_FILE}" token="@@namespace" value="${namespace}"/>
		<delete file="${BUILD_DIR}/${OUTPUT_SRC_FILE}"/>
	</target>
	<!--
		This task will compress the main.js bundle using CLOSURE
		compressor and rename the file main.compress.js
	-->
	<target name="compress_javascript" depends="bundle_javascript">
		<echo>Compressing JavaScript Files...</echo>
		<apply executable="java" parallel="false">
			<fileset dir="${BUILD_DIR}" includes="${OUTPUT_JS_FILE}"/>
			<arg line="-jar"/>
			<arg path="${CLOSURE}"/>
			<arg line="--js"/>
			<srcfile/>
			<arg line="--js_output_file"/>
			<mapper type="glob" from="*.js" to="${BUILD_DIR}/*.min.js"/>
			<targetfile/>
		</apply>
		<echo>JavaScript Compression Done!!!</echo>
	</target>
	
	<target name="create_doc">
		<echo>Generating documentation...</echo>
		<exec executable="java">
			<arg line="-jar"/>
			<arg path="${JS_DOC_TOOLKIT}/jsrun.jar"/>
			<arg line="${JS_DOC_TOOLKIT}/app/run.js"/>
			<arg line="-d=${BUILD_DIR}/jsdoc"/>
			<arg line="-t=${JS_DOC_TOOLKIT}/templates/jsdoc"/>
			<arg line="src/"/>
			
		</exec>
		<echo>Generating doc done!!!</echo>
	</target>
	
	<!--
	This task will clean out any previous build files by
	deleting the current build folder and re-creating it
	-->
	<target name="clean">
		<echo>Delete old build folder...</echo>
		<delete dir="${BUILD_DIR}"/>
		<delete dir="${BUILD_DIR}/jsdoc"/>
		<echo>Create new build folder...</echo>
		<mkdir dir="${BUILD_DIR}"/>
		<mkdir dir="${BUILD_DIR}/jsdoc"/>
		
	</target>
</project>